{
	"info": {
		"_postman_id": "2ed37af0-0c5d-422e-8454-066025278237",
		"name": "SWAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "https://swapi.dev/api/",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3e81505e-3e23-44c7-9374-4107090625f4",
						"exec": [
							"//1. Correct responce format JSON\r",
							"pm.test(\"Correct responce forman JSON\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"});\r",
							"\r",
							"//2. We have all the declared fields in the responce\r",
							"pm.test(\"Check that we have all declared fiels\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"people\");\r",
							"    pm.expect(jsonData).to.have.property(\"planets\");\r",
							"    pm.expect(jsonData).to.have.property(\"films\");\r",
							"    pm.expect(jsonData).to.have.property(\"species\");\r",
							"    pm.expect(jsonData).to.have.property(\"vehicles\");\r",
							"    pm.expect(jsonData).to.have.property(\"starships\");\r",
							"});\r",
							"\r",
							"//3. Field value isn`t NULL\r",
							"pm.test(\"Check if value isn`t NULL\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).not.eql(null);\r",
							"    pm.expect(jsonData.planets).not.eql(null);\r",
							"    pm.expect(jsonData.films).not.eql(null);\r",
							"    pm.expect(jsonData.species).not.eql(null);\r",
							"    pm.expect(jsonData.vehicles).not.eql(null);\r",
							"    pm.expect(jsonData.starships).not.eql(null);\r",
							"});\r",
							"\r",
							"//4. Check if value isn`t empty\r",
							"pm.test(\"Check if value isn`t empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).not.eql(\"\");\r",
							"    pm.expect(jsonData.planets).not.eql(\"\");\r",
							"    pm.expect(jsonData.films).not.eql(\"\");\r",
							"    pm.expect(jsonData.species).not.eql(\"\");\r",
							"    pm.expect(jsonData.vehicles).not.eql(\"\");\r",
							"    pm.expect(jsonData.starships).not.eql(\"\");\r",
							"});\r",
							"\r",
							"//5/ Check if field corresponds to a specific value\r",
							"pm.test(\"Check if field corresponds to a specific value\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).to.eql(\"http://swapi.dev/api/people/\");\r",
							"    pm.expect(jsonData.planets).to.eql(\"http://swapi.dev/api/planets/\");\r",
							"    pm.expect(jsonData.films).to.eql(\"http://swapi.dev/api/films/\");\r",
							"    pm.expect(jsonData.species).to.eql(\"http://swapi.dev/api/species/\");\r",
							"    pm.expect(jsonData.vehicles).to.eql(\"http://swapi.dev/api/vehicles/\");\r",
							"    pm.expect(jsonData.starships).to.eql(\"http://swapi.dev/api/starships/\");\r",
							"});\r",
							"\r",
							"//6. Status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//7. Status message is ok\r",
							"pm.test(\"Status message is ok\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//8. Responce time is less than 1000ms\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"//9. There is a specific header in the responce\r",
							"pm.test(\"There is a specific header in the responce\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"//10. The responce has a specific header with a specific value\r",
							"pm.test(\"The responce has a specific header with a specific value\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"//11. Cookie exists\r",
							"pm.test(\"Cookie exists\", function () {\r",
							"    pm.cookies.has(\"\");\r",
							"});\r",
							"\r",
							"//12. Cookie has value\r",
							"pm.test(\"Cookie has value\", function () {\r",
							"    try{\r",
							"        var MY_COOKIE = pm.cookies.get(\"\");\r",
							"        console.log(MY_COOKIE);\r",
							"    } catch(e) {\r",
							"        console.log(\"SOME PROBLEM WITH COOKIE ->\" + e)\r",
							"    }\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followOriginalHttpMethod": false
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "JSON Schema Validation #1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "47f54970-22db-4fd7-aa83-43066db34280",
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"\r",
							"var schema = {\r",
							"    // specify the type of object\r",
							"    \"type\": \"object\",\r",
							"    // specifyrequires proporties\r",
							"    \"required\": [\"people\", \"planets\", \"films\", \"species\", \"vehicles\", \"starships\" ],\r",
							"    // describe properties\r",
							"    \"properties\": {\r",
							"        \"people\": {\"type\": \"string\"},\r",
							"        \"planets\": {\"type\": \"string\"},\r",
							"        \"films\": {\"type\": \"string\"},\r",
							"        \"species\": {\"type\": \"string\"},\r",
							"        \"vehicles\": {\"type\": \"string\"},\r",
							"        \"starships\": {\"type\": \"string\"},\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Body in correct\", function() {\r",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "JSON Schema Validation #2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "47f54970-22db-4fd7-aa83-43066db34280",
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"\r",
							"var schema = {\r",
							"    // specify the type of object\r",
							"    \"type\": \"object\",\r",
							"    // specifyrequires proporties\r",
							"    \"required\": [\"name\", \"homeworld\", \"films\", \"species\", \"vehicles\", \"starships\" ],\r",
							"    // describe properties\r",
							"    \"properties\": {\r",
							"        \"name\": {\"type\": \"string\"},\r",
							"        \"homeworld\": {\"type\": \"string\"},\r",
							"        \"films\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\": \"string\"}\r",
							"            },\r",
							"        \"species\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\": \"string\"}\r",
							"        },\r",
							"        \"vehicles\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\": \"string\"}\r",
							"        },\r",
							"        \"starships\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\": \"string\"}\r",
							"        },\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Body in correct\", function() {\r",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/people/1",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						"people",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://053baf01-9d2b-4064-a2ed-7d7d038201a1.mock.pstmn.io",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://053baf01-9d2b-4064-a2ed-7d7d038201a1.mock.pstmn.io",
					"protocol": "https",
					"host": [
						"053baf01-9d2b-4064-a2ed-7d7d038201a1",
						"mock",
						"pstmn",
						"io"
					]
				}
			},
			"response": [
				{
					"name": "https://053baf01-9d2b-4064-a2ed-7d7d038201a1.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"Den\"}"
						},
						"url": {
							"raw": "https://053baf01-9d2b-4064-a2ed-7d7d038201a1.mock.pstmn.io/action",
							"protocol": "https",
							"host": [
								"053baf01-9d2b-4064-a2ed-7d7d038201a1",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"action"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Tue, 11 Aug 2020 13:47:44 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1597153518"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=eb8c5f24bc9f9a8b"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=181aa56d0fa23843"
						},
						{
							"key": "Content-Length",
							"value": "82"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Den\",\n        \"staus\": \"created\",\n        \"message\": \"success\",\n        \"header\": \"success\"\n    }\n}"
				},
				{
					"name": "https://053baf01-9d2b-4064-a2ed-7d7d038201a1.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://053baf01-9d2b-4064-a2ed-7d7d038201a1.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"053baf01-9d2b-4064-a2ed-7d7d038201a1",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Tue, 11 Aug 2020 13:44:20 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1597153518"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=eb8c5f24bc9f9a8b"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=181aa56d0fa23843"
						},
						{
							"key": "Content-Length",
							"value": "140"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"test\",\n        \"message\": \"success\",\n        \"header\": \"success\"\n    }\n}"
				}
			]
		},
		{
			"name": "https://053baf01-9d2b-4064-a2ed-7d7d038201a1.mock.pstmn.io",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Den\"}"
				},
				"url": {
					"raw": "https://053baf01-9d2b-4064-a2ed-7d7d038201a1.mock.pstmn.io/action",
					"protocol": "https",
					"host": [
						"053baf01-9d2b-4064-a2ed-7d7d038201a1",
						"mock",
						"pstmn",
						"io"
					],
					"path": [
						"action"
					]
				}
			},
			"response": [
				{
					"name": "https://053baf01-9d2b-4064-a2ed-7d7d038201a1.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"Den\"}"
						},
						"url": {
							"raw": "https://053baf01-9d2b-4064-a2ed-7d7d038201a1.mock.pstmn.io/action",
							"protocol": "https",
							"host": [
								"053baf01-9d2b-4064-a2ed-7d7d038201a1",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"action"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Tue, 11 Aug 2020 13:47:44 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1597153518"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=eb8c5f24bc9f9a8b"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=181aa56d0fa23843"
						},
						{
							"key": "Content-Length",
							"value": "82"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Den\",\n        \"staus\": \"created\",\n        \"message\": \"success\",\n        \"header\": \"success\"\n    }\n}"
				},
				{
					"name": "https://053baf01-9d2b-4064-a2ed-7d7d038201a1.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://053baf01-9d2b-4064-a2ed-7d7d038201a1.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"053baf01-9d2b-4064-a2ed-7d7d038201a1",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Tue, 11 Aug 2020 13:44:20 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1597153518"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=eb8c5f24bc9f9a8b"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=181aa56d0fa23843"
						},
						{
							"key": "Content-Length",
							"value": "140"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"test\",\n        \"message\": \"success\",\n        \"header\": \"success\"\n    }\n}"
				}
			]
		},
		{
			"name": "https://053baf01-9d2b-4064-a2ed-7d7d038201a1.mock.pstmn.io",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Den\"}"
				},
				"url": {
					"raw": "https://053baf01-9d2b-4064-a2ed-7d7d038201a1.mock.pstmn.io/action",
					"protocol": "https",
					"host": [
						"053baf01-9d2b-4064-a2ed-7d7d038201a1",
						"mock",
						"pstmn",
						"io"
					],
					"path": [
						"action"
					]
				}
			},
			"response": [
				{
					"name": "https://053baf01-9d2b-4064-a2ed-7d7d038201a1.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"Den\"}"
						},
						"url": {
							"raw": "https://053baf01-9d2b-4064-a2ed-7d7d038201a1.mock.pstmn.io/action",
							"protocol": "https",
							"host": [
								"053baf01-9d2b-4064-a2ed-7d7d038201a1",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"action"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Tue, 11 Aug 2020 13:47:44 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1597153518"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=eb8c5f24bc9f9a8b"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=181aa56d0fa23843"
						},
						{
							"key": "Content-Length",
							"value": "82"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Den\",\n        \"staus\": \"created\",\n        \"message\": \"success\",\n        \"header\": \"success\"\n    }\n}"
				},
				{
					"name": "https://053baf01-9d2b-4064-a2ed-7d7d038201a1.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://053baf01-9d2b-4064-a2ed-7d7d038201a1.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"053baf01-9d2b-4064-a2ed-7d7d038201a1",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Tue, 11 Aug 2020 13:44:20 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1597153518"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=eb8c5f24bc9f9a8b"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=181aa56d0fa23843"
						},
						{
							"key": "Content-Length",
							"value": "140"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"test\",\n        \"message\": \"success\",\n        \"header\": \"success\"\n    }\n}"
				},
				{
					"name": "https://053baf01-9d2b-4064-a2ed-7d7d038201a1.mock.pstmn.io/action",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"Den\"}"
						},
						"url": {
							"raw": "https://053baf01-9d2b-4064-a2ed-7d7d038201a1.mock.pstmn.io/action",
							"protocol": "https",
							"host": [
								"053baf01-9d2b-4064-a2ed-7d7d038201a1",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"action"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Tue, 11 Aug 2020 13:53:37 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "118"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1597154038"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=1f46d0cbbc08612c"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=94b57aca76901fb4"
						},
						{
							"key": "Content-Length",
							"value": "135"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Den\",\n        \"staus\": \"created\",\n        \"message\": \"success\",\n        \"header\": \"success\"\n    }\n}"
				}
			]
		}
	],
	"protocolProfileBehavior": {}
}